#!/usr/bin/env php
<?php

// Find and initialize Composer
$files = array(
    __DIR__ . '/../autoload.php',
    __DIR__ . '/../../autoload.php',
    __DIR__ . '/../../../autoload.php',
    __DIR__ . '/../../../../autoload.php',
);

$found = false;
foreach ($files as $file) {
    if (file_exists($file)) {
        require_once $file;
        break;
    }
}

if (!class_exists('Composer\Autoload\ClassLoader', false)) {
    die(
        'You need to set up the project dependencies using the following commands:' . PHP_EOL .
        'curl -s http://getcomposer.org/installer | php' . PHP_EOL .
        'php composer.phar install' . PHP_EOL
    );
}

$QUEUE = getenv('QUEUE');
if (empty($QUEUE)) {
    die("Set QUEUE env var containing the list of queues to work.\n");
}

use Zend\Mvc\Application;
use Zend\Stdlib\ArrayUtils;

ini_set('display_errors', true);
chdir(dirname(dirname(dirname(dirname(__DIR__)))));

$appConfig = include 'config/application.config.php';
if (file_exists('config/development.config.php')) {
    $appConfig = ArrayUtils::merge($appConfig, include 'config/development.config.php');
}

$application = Application::init($appConfig);

$config = $application->getServiceManager()->get('config');

$REDIS_BACKEND = $config['zf3_resque']['server'];
$REDIS_BACKEND_DB = getenv('REDIS_BACKEND_DB');
if (!empty($REDIS_BACKEND)) {
    if (empty($REDIS_BACKEND_DB)) {
        \Resque::setBackend($REDIS_BACKEND);
    } else {
        \Resque::setBackend($REDIS_BACKEND, $REDIS_BACKEND_DB);
    }
}

$logLevel = false;
$LOGGING = getenv('LOGGING');
$VERBOSE = getenv('VERBOSE');
$VVERBOSE = getenv('VVERBOSE');
if (!empty($LOGGING) || !empty($VERBOSE)) {
    $logLevel = true;
} else {
    if (!empty($VVERBOSE)) {
        $logLevel = true;
    }
}

if (strpos($QUEUE, ',') !== false) {
    $QUEUE = str_replace(',', '-', $QUEUE);
}
if (strpos($QUEUE, '*') !== false) {
    $QUEUE = 'all';
}

// See if the APP_INCLUDE containes a logger object,
// If none exists, fallback to internal logger
if (!isset($logger) || !is_object($logger)) {
    $logger = new Resque_Log($logLevel);
}

$BLOCKING = getenv('BLOCKING') !== false;

$interval = 5;
$INTERVAL = getenv('INTERVAL');
if (!empty($INTERVAL)) {
    $interval = $INTERVAL;
}

$count = 1;
$COUNT = getenv('COUNT');
if (!empty($COUNT) && $COUNT > 1) {
    $count = $COUNT;
}

if ($count > 1) {

    try {

        for ($i = 0; $i < $count; ++$i) {
            $pid = Resque::fork();
            if (!$pid) {
                $worker = $application
                    ->getServiceManager()
                    ->get('Worker');

                $worker->setLogger($logger);
                $logger->log(\Psr\Log\LogLevel::NOTICE, 'Starting worker {worker}', array('worker' => $worker));

                $worker->work($interval, $BLOCKING);
                exit(0);
            }
        }

        pcntl_waitpid(0, $status);
    } catch (Throwable $e) {
        echo $e->getMessage();
    }

} // Start a single worker
else {
    $worker = $application
        ->getServiceManager()
        ->get('Worker');
    $worker->setLogger($logger);

    $PIDFILE = getenv('PIDFILE');
    if ($PIDFILE) {
        file_put_contents($PIDFILE, getmypid()) or
        die('Could not write PID information to ' . $PIDFILE);
    }

    $logger->log(\Psr\Log\LogLevel::NOTICE, 'Starting worker {worker}', array('worker' => $worker));
    $worker->work($interval, $BLOCKING);
}